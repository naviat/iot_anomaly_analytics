AWSTemplateFormatVersion: '2010-09-09'
#Transform: AWS::Serverless-2016-10-31

Parameters:

  EmailAddress:
    Description: "Your email address, used to notify via SNS when anomalies are detected"
    Type: "String"

Resources:

  # create the S3 bucket used to store time-series data
  DataRepositoryS3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      AccessControl: "PublicRead"

  # SNS topic used to alert user when anomalies are detected in Kinesis
  AlertSnsTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint: !Ref EmailAddress
          Protocol: "email"

  # create IAM policy that permits Kinesis Firehose to write to the S3 bucket
  FirehoseToS3Policy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
           -
             Effect: "Allow"
             Action:
               - "s3:PutObject"
               - "s3:PutObjectAcl"
               - "s3:PutObjectVersionAcl"
               - "s3:AbortMultipartUpload"
               - "s3:GetBucketLocation"
               - "s3:GetObject"
               - "s3:ListBucket"
               - "s3:ListBucketMultipartUploads"
             Resource:
               - !Join [ "", [ "arn:aws:s3:::", !Ref DataRepositoryS3Bucket ] ]
               - !Join [ "", [ "arn:aws:s3:::", !Ref DataRepositoryS3Bucket, "/*" ] ]
           -
             Effect: "Allow"
             Action:
               - "logs:CreateLogGroup"
               - "logs:CreateLogStream"
               - "logs:PutLogEvents"
               - "logs:DescribeLogStreams"
             Resource: "arn:aws:logs:*:*:*"
      PolicyName: "FirehoseToS3"
      Roles:
        - Ref: FirehoseToS3Role

  # create IAM role that connects to the IAM policy
  FirehoseToS3Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "firehose.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  # create IAM role that grants Kinesis Analytics access to the Firehose delivery stream
  KinesisAnalyticsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "kinesisanalytics.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"

  # create IAM policy that permits Kinesis Analytics to read from the Firehose delivery stream
  KinesisAnalyticsToKinesisStreamAndFirehosePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
           -
              Effect: "Allow"
              Action:
                - "firehose:DescribeDeliveryStream"
                - "firehose:Get*"
              Resource: !Join [ "", [ "arn:aws:firehose:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":deliverystream/", !Ref DataKinesisFirehose ] ]
           -
              Effect: "Allow"
              Action:
                - "kinesis:DescribeStream"
                - "kinesis:PutRecord"
                - "kinesis:PutRecords"
              Resource: !GetAtt KinesisAnomalyStream.Arn
      PolicyName: "AnalyticsToFirehose"
      Roles:
        - Ref: KinesisAnalyticsRole

  # create the Kinesis Firehose that takes device data and persists to S3
  DataKinesisFirehose:
    Type: "AWS::KinesisFirehose::DeliveryStream"
    DependsOn: DataRepositoryS3Bucket
    Properties:
      S3DestinationConfiguration:
        BucketARN: !Join [ "", [ "arn:aws:s3:::", !Ref DataRepositoryS3Bucket ] ]
        BufferingHints:
          IntervalInSeconds: 60 # amount of seconds to wait before persisting
          SizeInMBs: 1 # setting small for a basic test
        CompressionFormat: "UNCOMPRESSED" # in real life, we would both compress & encrypt this data
        RoleARN: !GetAtt FirehoseToS3Role.Arn
        Prefix: "deviceData/"
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref FirehoseLoggingLogGroup
          LogStreamName: !Ref FirehoseLogStream

    # create Kinesis stream that Kinesis Analytics will write to when anomalies are found
  KinesisAnomalyStream:
    Type: "AWS::Kinesis::Stream"
    Properties:
      ShardCount: 1


    # create a CWL log group & log stream for Kinesis Firehose logging
  FirehoseLoggingLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: 3

  FirehoseLogStream:
    Type: "AWS::Logs::LogStream"
    Properties:
      LogGroupName: !Ref FirehoseLoggingLogGroup

Outputs:

  DataRepositoryBucketName:
    Description: "Name of the S3 bucket storing device data"
    Value: !Ref DataRepositoryS3Bucket

  DataKinesisFirehoseId:
    Description: "ID of the Kinesis Firehose delivery stream, to be used in the data producer script"
    Value: !Ref DataKinesisFirehose

  SnsAlertTopic:
    Description: "Name of SNS topic used to notify (via email) user of anomlies"
    Value: !GetAtt AlertSnsTopic.TopicName
